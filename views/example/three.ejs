
 
<%- row.start() %>

<!--The leftmost column with board orientation -->
<%- column.start(4, 'padded') %>
    <%- row.start() %>
        <div class='inner-well' >
            <div class='canvas-3' id='showbox' style='width: 100%; height: 300px'></div>
        </div>
    <%- row.end() %>
<%- column.end() %>

<!--The right column with angles -->
<%- column.start(8, 'padded') %>
    <%- row.start() %>
        <div class='inner-well span12' >
            <%- row.start() %>
                
                <div id='x-accel-history' class='span12' style='height:200px;'></div>
            <%- row.end() %>
            <%- row.start() %>
                <!--  <%- statusBlock('Y', '0', '', {span: 3, valueClass: 'status-y-angle'}) %>  -->
                <div id='y-rotation-history' class='span12' style='height:200px;'></div>
            <%- row.end() %>
            <%- row.start() %>
            <%- row.end() %>
        </div>
    <%- row.end() %>
<%- column.end() %>

<%- row.end() %>
 
<script>
    
    // after the document is loaded, run this function
    $(document).ready( function() {

        var xRotation;  // strip chart object
        var yRotation;  // strip chart object
        var zRotation;  // strip chart object
        var xAccel;     // strip chart object

        var div = $('#showbox');

        // create the animation scene, camera, and renderer
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera( 75, div.width() / div.height(), 0.1, 1000 );
        renderer = new THREE.WebGLRenderer();

        // size the rendering to fit in the container div
        renderer.setSize( div.width(), div.height() );
        div.append( renderer.domElement );

        //var toplight = new THREE.DirectionalLight( 0xffffff );
        var ambientlight = new THREE.AmbientLight( 0xFFFFFF );
        //toplight.position.set( 0, 1, 1 ).normalize();
        //scene.add(toplight);
        scene.add(ambientlight);

        // create the object that will be animated
        var geometry = new THREE.BoxGeometry( 9.58 , 6, 0.3 );

        var materialbottom = new THREE.MeshPhongMaterial( { map: THREE.ImageUtils.loadTexture('/images/bottom2.png') } );
        var materialtop = new THREE.MeshPhongMaterial( { map: THREE.ImageUtils.loadTexture('/images/top2.png') } );
        var materialsides = new THREE.MeshPhongMaterial( { ambient: 0x050505, color: 0x006000, specular: 0x555555, shininess: 30 } );
    
        var materials = [
            materialsides, 
            materialsides, 
            materialsides,
            materialsides, 
            materialbottom, 
            materialtop, 
            ];
 
        var meshFaceMaterial = new THREE.MeshFaceMaterial( materials );

        // Add the board object to the scene
        var cube = new THREE.Mesh( geometry, meshFaceMaterial );
        scene.add( cube );
        
        // Add axis to the scene so we know which way is up
        var axes = buildAxes( 8 );
        scene.add( axes);


        // Aim the camera     
        camera.position.set( Math.PI/4, -10, Math.PI/4 );
        camera.up = new THREE.Vector3(0,0,1);
        camera.lookAt( 0,0,0);

 
        // Set up trackball controls so we can move the camera with the mouse
        var controls = new THREE.TrackballControls( camera );

        controls.rotateSpeed = 3.0;
        controls.zoomSpeed = 1.2;
        controls.panSpeed = 0.8;

        controls.noZoom = true;
        controls.noPan = true;

        controls.staticMoving = true;
        controls.dynamicDampingFactor = 0.3;

        controls.keys = [ 65, 83, 68 ];

       // this is the rendering loop that actually moves the object
        var render = function () {
           // requestAnimationFrame( render );

             //cube.rotation.y += 0.01;
             //cube.rotation.x += 0.01;
            
             controls.update();
             renderer.render(scene, camera);
        };


        // start rendering using the rendering loop defined above
        render(); 
 
        // Set up the strip charts for X angle
        FusionCharts.ready(function () {

/*
            // enable chart debugging features
            FusionCharts['debugger'].outputTo(function (message) {
                console.log(message);
            });
            FusionCharts['debugger'].enable(true);
*/
            //common strip chart setup
            var stripchart = {
                "manageresize": "1",
                "bgcolor": "000000",
                "bgalpha": "100",
                "canvasborderthickness": "1",
                "canvasbordercolor": "008040",
                "canvasbgcolor": "000000",
                "yaxismaxvalue": "90",
                "yaxisminvalue": "-90",
                "decimals": "0",
                "numdivlines": "6",
                "numvdivlines": "28",
                "numdisplaysets": "10",
                "divlinecolor": "008040",
                "vdivlinecolor": "008040",
                "divlinealpha": "100",
                "chartleftmargin": "10",
                "basefontcolor": "00dd00",
                "showrealtimevalue": "1",
                "numbersuffix": "\xB0",
                "labeldisplay": "rotate",
                "slantlabels": "1",
                "tooltipbgcolor": "000000",
                "tooltipbordercolor": "008040",
                "basefontsize": "11",
                "showalternatehgridcolor": "0",
                "legendbgcolor": "000000",
                "legendbordercolor": "008040",
                "legendpadding": "35",
                "showlabels": "1",
                "showborder": "0"
            };

            var dataset = [
                {
                    "color": "00dd00",
                    //"seriesname": "Processor A",
                    "showvalues": "0",
                    "alpha": "100",
                    "anchoralpha": "0",
                    "linethickness": "2",
                    "data": [
                        {
                            "value": "0"
                        }
                    ]
                },
            ];  

            // Create the stripchart for X rotation
            stripchart.caption = "X Rotation";

            xRotation = new FusionCharts({
                "type": "realtimeline",
                "renderAt": "x-rotation-history",
                "width": "100%",
                "height": "100%",
                "dataFormat": "json",
                "dataSource": {
                    "chart" : stripchart,
                    "dataset" : dataset, 
                },
            });

            //xRotation.render();

            // Create the stripchart for Y rotation
            stripchart.caption = "Chassis Angle";
            yRotation = new FusionCharts({
                "type": "realtimeline",
                "renderAt": "y-rotation-history",
                "width": "100%",
                "height": "100%",
                "dataFormat": "json",
                "animation" : "0",
                "dataSource": {
                    "chart" : stripchart,
                    "dataset" : dataset, 
                },
            });

            yRotation.render();
            
            //common acceleration strip chart setup
            var accelchart = {
                "manageresize": "1",
                "bgcolor": "000000",
                "bgalpha": "100",
                "canvasborderthickness": "1",
                "canvasbordercolor": "008040",
                "canvasbgcolor": "000000",
                "yaxismaxvalue": "1",
                "yaxisminvalue": "-1",
                "decimals": "2",
                "numdivlines": "11",
                "numvdivlines": "10",
                "numdisplaysets": "10",
                "divlinecolor": "008040",
                "vdivlinecolor": "008040",
                "divlinealpha": "100",
                "chartleftmargin": "10",
                "basefontcolor": "00dd00",
                "showrealtimevalue": "1",
                "numbersuffix": "g",
                //"labeldisplay": "rotate",
                //"slantlabels": "1",
                "tooltipbgcolor": "000000",
                "tooltipbordercolor": "008040",
                "basefontsize": "11",
                "showalternatehgridcolor": "0",
                "legendbgcolor": "000000",
                "legendbordercolor": "008040",
                "legendpadding": "35",
                //"showlabels": "1",
                "showborder": "0"
            };
            // Create the stripchart for X acceleration
            accelchart.caption = "X Acceleration";
            xAccel = new FusionCharts({
                "type": "realtimeline",
                "renderAt": "x-accel-history",
                "width": "100%",
                "height": "100%",
                "dataFormat": "json",
                "animation" : "0",
                "dataSource": {
                    "chart" : accelchart,
                    "dataset" : dataset, 
                },
            });

            xAccel.render();
        });  

       

                // set up a query to the server for the current orientation of the board
        setInterval( function() {
            $.getJSON( '/imu/currentImu', function(data) {
                if( data.quaternion ) {
                    var q = new THREE.Quaternion( 
                        parseFloat(data.quaternion[1]),
                        parseFloat(data.quaternion[2]),
                        parseFloat(data.quaternion[3]),
                        parseFloat(data.quaternion[0])
                      );

                    // update the orientation of the object
                    cube.matrix.makeRotationFromQuaternion(q); 
                    cube.matrixAutoUpdate = false;
 
                    // Convert to degrees for display
                    var e = new THREE.Euler().setFromQuaternion( q );
                    
                    var x = (e.x * 180 / Math.PI).toFixed(1);
                    var y = (e.y * 180 / Math.PI).toFixed(1);
                    var z = (e.z * 180 / Math.PI).toFixed(1);
                    //$('.status-x-angle').html( '<span>X</span>' + x );
                    //$('.status-y-angle').html( '<span>Y</span>' + y );
                    //$('.status-z-angle').html( '<span>Z</span>' + z );

                    render();
                    
                    // update the strip charts
                    //if( xRotation) xRotation.feedData( '&value='+x );
                    if( yRotation) yRotation.feedData( '&value='+y );
                    //if( zRotation) zRotation.feedData( '&value='+z );

                    if( xAccel ) xAccel.feedData( '&value='+data.acceleration[0] );
  
                }
            });
        }, 100);

           
    });

</script>
 