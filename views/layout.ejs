<!DOCTYPE html>
<html>
<head>
       <title>Diagnostics</title>


     <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    
    <meta name="robots" content="all,follow" />
    
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

        <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/cs.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/theme.css">
    <!--STYLES END-->
    
    <!--[if lt IE 9]>
    <script type="text/javascript" src="/js/html5shiv.js"></script>
    <script type="text/javascript" src="/js/excanvas.js"></script>
    <script type="text/javascript" src="/js/iefix.js"></script>
    <link rel="stylesheet" type="text/css" href="/css/iefix.css" />    
    <![endif]-->

    <script src="/js/dependencies/jquery-1.11.2.min.js"></script>
 
 
    <meta name="viewport" content="width=device-width, maximum-scale=1, initial-scale=1, user-scalable=0">
</head>
<body>

    <div class="container-fluid">
        <div id="banner">
            <div class="row-fluid">
                <div id="bannerTop" class="span12">
                    <div class="row-fluid">
                        <div id="bannerLogo" class="logo span5 pull-right"></div>
                        <div id="bannerDeviceName" class="Devicename span4 pull-left">
                            <div class='elem_DeviceName'>
                                <span>Ride Dynamics</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div id="bannerCenter" class="span12">
                    <div class="row-fluid">
                        <%- include partials/mainmenu.ejs %>
                        
                        
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div id="bannerBottom" class="span12">
                    <div class="row-fluid">
                        <div id="bannerMainMenu"></div>
                    </div>
                </div>
            </div>
        </div>

        <div id="content-area" >

        <%- body %>


       </div><!-- /id="content-area" -->
        
    </div>

 
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/fusioncharts/fusioncharts.js"></script>
    <script src="/js/dependencies/jquery-1.11.2.min.js"></script>
    <script src="/js/dependencies/fusioncharts/fusioncharts.jqueryplugin.js"></script>
    <script src="/js/dependencies/three.min.js"></script>
    <script src="/js/dependencies/dygraph-combined.js"></script>
    <script src="/js/dependencies/fusioncharts/fusioncharts.charts.js"></script>
    <script src="/js/dependencies/fusioncharts/fusioncharts.widgets.js"></script>
    <script src="/js/dependencies/fusioncharts/themes/fusioncharts.theme.cs.js"></script>
    <script src="/js/default.js"></script>
    <script src="/js/dysync.js"></script>
    <script src="/js/led.js"></script>
    <script src="/js/partials.js"></script>
    <!--SCRIPTS END-->

</body>
</html>